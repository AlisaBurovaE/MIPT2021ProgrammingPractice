1. Точно передаются 1.py, arg, 7 и -a(тут видимо имеется в виду, что дефолтное значение
для -а), а про --value 18 я не очень поняла. Похоже на то, что мы прописываем --value и
18 после него это как раз и есть параметр... Но мало ли. В общем ответ 5 или 6 (скорее 5)

2. С помощью sys: 
import sys
print(sys.argv[0])

Поскольку первый (ну, нулевой) аргумент в списке это имя скрипта

3. Мы используем экземпляр класса ArgumentParser, добавляем 
параметры с помощью add_argument (прописываем для каждого параметра).
Необязательные параметры можно прописывать с короткой или длинной версией, т.е.
мы можем прописать как -f, так и --file. Если мы пропишем оба имени для параметра,
то обращаться к переменной мы сможем только через полное (т.е. например namespace.file)

4. default - значение, полученное, если опция отсутствует в командной строке,
const - постоянное значение, требуемое некоторыми action и nargs, где nargs - 
количество параметров командной строки, которые следует использовать
Если у нас нас nargs='?', то нужно прописать default. const же прописывается в ситуации,
где нам нужно некое значение параметра, которое не меняется от ситуации и вбивать его
через командную строку нет смысла

5. Декоратор — это функция, которая позволяет обернуть другую функцию для расширения 
её функциональности без непосредственного изменения её кода

6. Работа функции замедляется